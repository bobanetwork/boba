// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	eth "github.com/ethereum-optimism/optimism/op-service/eth"

	mock "github.com/stretchr/testify/mock"
)

// NextDataProvider is an autogenerated mock type for the NextDataProvider type
type NextDataProvider struct {
	mock.Mock
}

// NextData provides a mock function with given fields: _a0
func (_m *NextDataProvider) NextData(_a0 context.Context) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Origin provides a mock function with given fields:
func (_m *NextDataProvider) Origin() eth.L1BlockRef {
	ret := _m.Called()

	var r0 eth.L1BlockRef
	if rf, ok := ret.Get(0).(func() eth.L1BlockRef); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(eth.L1BlockRef)
	}

	return r0
}

type mockConstructorTestingTNewNextDataProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewNextDataProvider creates a new instance of NextDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNextDataProvider(t mockConstructorTestingTNewNextDataProvider) *NextDataProvider {
	mock := &NextDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
