// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ledgerwatch/erigon"
	libcommon "github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon/accounts/abi"
	"github.com/ledgerwatch/erigon/accounts/abi/bind"
	"github.com/ledgerwatch/erigon/core/types"
	"github.com/ledgerwatch/erigon/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = libcommon.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20VotesCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// BOBAABI is the input ABI used to generate the binding from.
const BOBAABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BOBABin is the compiled bytecode used for deploying new contracts.
var BOBABin = "0x6101406040523480156200001257600080fd5b506040518060400160405280600a8152602001692137b130902a37b5b2b760b11b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600a8152602001692137b130902a37b5b2b760b11b81525060405180604001604052806004815260200163424f424160e01b8152508160039081620000a29190620007b0565b506004620000b18282620007b0565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919096012090529290925261012052506200015d9050336b019d971e4fe8401e7400000062000163565b620008d4565b6200016f828262000173565b5050565b6200017f828262000222565b6b019d971e4fe8401e740000006200019660025490565b1115620002035760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b60648201526084015b60405180910390fd5b6200021c600962000d886200031160201b178362000328565b50505050565b6001600160a01b0382166200027a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620001fa565b80600260008282546200028e919062000892565b90915550506001600160a01b03821660009081526020819052604081208054839290620002bd90849062000892565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36200016f60008383620004c4565b60006200031f828462000892565b90505b92915050565b8254600090819080156200037a578562000344600183620008a8565b81548110620003575762000357620008be565b60009182526020909120015464010000000090046001600160e01b03166200037d565b60005b6001600160e01b031692506200039483858760201c565b9150600081118015620003d857504386620003b1600184620008a8565b81548110620003c457620003c4620008be565b60009182526020909120015463ffffffff16145b156200044157620003e982620004d1565b86620003f7600184620008a8565b815481106200040a576200040a620008be565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b03160217905550620004b6565b8560405180604001604052806200045e436200054060201b60201c565b63ffffffff1681526020016200047485620004d1565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b505050565b620004bf838383620005a7565b60006001600160e01b038211156200053c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620001fa565b5090565b600063ffffffff8211156200053c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620001fa565b6001600160a01b03838116600090815260076020526040808220548584168352912054620004bf92918216911683818314801590620005e65750600081115b15620004bf576001600160a01b0383161562000673576001600160a01b038316600090815260086020908152604082208291620006309190620006fe901b62000d94178562000328565b91509150846001600160a01b031660008051602062002e9c833981519152838360405162000668929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615620004bf576001600160a01b038216600090815260086020908152604082208291620006b7919062000311901b62000d88178562000328565b91509150836001600160a01b031660008051602062002e9c8339815191528383604051620006ef929190918252602082015260400190565b60405180910390a25050505050565b60006200031f8284620008a8565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200073757607f821691505b6020821081036200075857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004bf57600081815260208120601f850160051c81016020861015620007875750805b601f850160051c820191505b81811015620007a85782815560010162000793565b505050505050565b81516001600160401b03811115620007cc57620007cc6200070c565b620007e481620007dd845462000722565b846200075e565b602080601f8311600181146200081c5760008415620008035750858301515b600019600386901b1c1916600185901b178555620007a8565b600085815260208120601f198616915b828110156200084d578886015182559484019460019091019084016200082c565b50858210156200086c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808201808211156200032257620003226200087c565b818103818111156200032257620003226200087c565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e051610100516101205161257862000924600039600061137a015260006113c9015260006113a4015260006112fd015260006113270152600061135101526125786000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063782d6fe1116100f9578063a9059cbb11610097578063d505accf11610071578063d505accf14610415578063d5abeb0114610428578063dd62ed3e14610468578063f1127ed8146104ae57600080fd5b8063a9059cbb146103dc578063b4b5ea57146103ef578063c3cda5201461040257600080fd5b80638e539e8c116100d35780638e539e8c1461039b57806395d89b41146103ae5780639ab24eb0146103b6578063a457c2d7146103c957600080fd5b8063782d6fe11461034557806379cc6790146103755780637ecebe001461038857600080fd5b80633950935111610166578063587cde1e11610140578063587cde1e146102765780635c19a95c146102d45780636fcfff45146102e757806370a082311461030f57600080fd5b8063395093511461023b5780633a46b1a81461024e57806342966c681461026157600080fd5b806323b872dd1161019757806323b872dd14610211578063313ce567146102245780633644e5151461023357600080fd5b806306fdde03146101be578063095ea7b3146101dc57806318160ddd146101ff575b600080fd5b6101c6610500565b6040516101d391906121bb565b60405180910390f35b6101ef6101ea366004612250565b610592565b60405190151581526020016101d3565b6002545b6040519081526020016101d3565b6101ef61021f36600461227a565b6105ac565b604051601281526020016101d3565b6102036105d0565b6101ef610249366004612250565b6105df565b61020361025c366004612250565b61062b565b61027461026f3660046122b6565b6106d1565b005b6102af6102843660046122cf565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600760205260409020541690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d3565b6102746102e23660046122cf565b6106de565b6102fa6102f53660046122cf565b6106e8565b60405163ffffffff90911681526020016101d3565b61020361031d3660046122cf565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b610358610353366004612250565b610717565b6040516bffffffffffffffffffffffff90911681526020016101d3565b610274610383366004612250565b61072b565b6102036103963660046122cf565b610744565b6102036103a93660046122b6565b61076f565b6101c66107e5565b6102036103c43660046122cf565b6107f4565b6101ef6103d7366004612250565b6108bf565b6101ef6103ea366004612250565b610990565b6103586103fd3660046122cf565b61099e565b6102746104103660046122fb565b6109ac565b610274610423366004612353565b610b23565b61043b6b019d971e4fe8401e7400000081565b6040517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90911681526020016101d3565b6102036104763660046123bd565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6104c16104bc3660046123f0565b610ce2565b60408051825163ffffffff1681526020928301517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1692810192909252016101d3565b60606003805461050f90612430565b80601f016020809104026020016040519081016040528092919081815260200182805461053b90612430565b80156105885780601f1061055d57610100808354040283529160200191610588565b820191906000526020600020905b81548152906001019060200180831161056b57829003601f168201915b5050505050905090565b6000336105a0818585610da0565b60019150505b92915050565b6000336105ba858285610f53565b6105c585858561102a565b506001949350505050565b60006105da6112e3565b905090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906105a090829086906106269087906124ac565b610da0565b600043821061069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526008602052604090206106ca9083611417565b9392505050565b6106db33826114fe565b50565b6106db3382611508565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860205260408120546105a6906115a6565b60006106ca610726848461062b565b611640565b610736823383610f53565b61074082826114fe565b5050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120546105a6565b60004382106107da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610692565b6105a6600983611417565b60606004805461050f90612430565b73ffffffffffffffffffffffffffffffffffffffff811660009081526008602052604081205480156108975773ffffffffffffffffffffffffffffffffffffffff831660009081526008602052604090206108506001836124bf565b81548110610860576108606124d2565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661089a565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610692565b6105c58286868403610da0565b6000336105a081858561102a565b60006105a6610726836107f4565b83421115610a16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610692565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf602082015273ffffffffffffffffffffffffffffffffffffffff8816918101919091526060810186905260808101859052600090610a9d90610a959060a001604051602081830303815290604052805190602001206116de565b858585611747565b9050610aa88161176f565b8614610b10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610692565b610b1a8188611508565b50505050505050565b83421115610b8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610692565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610bbc8c61176f565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610c24826116de565b90506000610c3482878787611747565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ccb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610692565b610cd68a8a8a610da0565b50505050505050505050565b604080518082019091526000808252602082015273ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260409020805463ffffffff8416908110610d3357610d336124d2565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101919091529392505050565b60006106ca82846124ac565b60006106ca82846124bf565b73ffffffffffffffffffffffffffffffffffffffff8316610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff8216610ee5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146110245781811015611017576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610692565b6110248484848403610da0565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166110cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff8216611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015611226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822085850390559185168152908120805484929061126a9084906124ac565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112d091815260200190565b60405180910390a36110248484846117a9565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561134957507f000000000000000000000000000000000000000000000000000000000000000046145b1561137357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b8181101561147b57600061143282846117b4565b905084868281548110611447576114476124d2565b60009182526020909120015463ffffffff16111561146757809250611475565b6114728160016124ac565b91505b5061141e565b81156114d4578461148d6001846124bf565b8154811061149d5761149d6124d2565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166114d7565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1695945050505050565b61074082826117cf565b73ffffffffffffffffffffffffffffffffffffffff8281166000818152600760208181526040808420805485845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46110248284836117e7565b600063ffffffff82111561163c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610692565b5090565b60006bffffffffffffffffffffffff82111561163c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201527f36206269747300000000000000000000000000000000000000000000000000006064820152608401610692565b60006105a66116eb6112e3565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006117588787878761198c565b9150915061176581611aa4565b5095945050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090208054600181018255905b50919050565b505050565b6117a4838383611cf8565b60006117c36002848418612501565b6106ca908484166124ac565b6117d98282611d37565b6110246009610d9483611f2b565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156118235750600081115b156117a45773ffffffffffffffffffffffffffffffffffffffff8316156118d85773ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260408120819061187890610d9485611f2b565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516118cd929190918252602082015260400190565b60405180910390a250505b73ffffffffffffffffffffffffffffffffffffffff8216156117a45773ffffffffffffffffffffffffffffffffffffffff82166000908152600860205260408120819061192890610d8885611f2b565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405161197d929190918252602082015260400190565b60405180910390a25050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156119c35750600090506003611a9b565b8460ff16601b141580156119db57508460ff16601c14155b156119ec5750600090506004611a9b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611a40573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611a9457600060019250925050611a9b565b9150600090505b94509492505050565b6000816004811115611ab857611ab861253c565b03611ac05750565b6001816004811115611ad457611ad461253c565b03611b3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610692565b6002816004811115611b4f57611b4f61253c565b03611bb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610692565b6003816004811115611bca57611bca61253c565b03611c57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610692565b6004816004811115611c6b57611c6b61253c565b036106db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600760205260408082205485841683529120546117a4929182169116836117e7565b73ffffffffffffffffffffffffffffffffffffffff8216611dda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611e90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610692565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290611ecc9084906124bf565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36117a4836000846117a9565b825460009081908015611f8b5785611f446001836124bf565b81548110611f5457611f546124d2565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611f8e565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250611fbc83858763ffffffff16565b9150600081118015611ffa57504386611fd66001846124bf565b81548110611fe657611fe66124d2565b60009182526020909120015463ffffffff16145b15612084576120088261210d565b866120146001846124bf565b81548110612024576120246124d2565b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550612104565b856040518060400160405280612099436115a6565b63ffffffff1681526020016120ad8561210d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82111561163c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610692565b600060208083528351808285015260005b818110156121e8578581018301518582016040015282016121cc565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461224b57600080fd5b919050565b6000806040838503121561226357600080fd5b61226c83612227565b946020939093013593505050565b60008060006060848603121561228f57600080fd5b61229884612227565b92506122a660208501612227565b9150604084013590509250925092565b6000602082840312156122c857600080fd5b5035919050565b6000602082840312156122e157600080fd5b6106ca82612227565b803560ff8116811461224b57600080fd5b60008060008060008060c0878903121561231457600080fd5b61231d87612227565b95506020870135945060408701359350612339606088016122ea565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561236e57600080fd5b61237788612227565b965061238560208901612227565b955060408801359450606088013593506123a1608089016122ea565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156123d057600080fd5b6123d983612227565b91506123e760208401612227565b90509250929050565b6000806040838503121561240357600080fd5b61240c83612227565b9150602083013563ffffffff8116811461242557600080fd5b809150509250929050565b600181811c9082168061244457607f821691505b60208210810361179e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156105a6576105a661247d565b818103818111156105a6576105a661247d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082612537577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000adec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724"

// DeployBOBA deploys a new Ethereum contract, binding an instance of BOBA to it.
func DeployBOBA(auth *bind.TransactOpts, backend bind.ContractBackend) (libcommon.Address, types.Transaction, *BOBA, error) {
	parsed, err := abi.JSON(strings.NewReader(BOBAABI))
	if err != nil {
		return libcommon.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, libcommon.FromHex(BOBABin), backend)
	if err != nil {
		return libcommon.Address{}, nil, nil, err
	}
	return address, tx, &BOBA{BOBACaller: BOBACaller{contract: contract}, BOBATransactor: BOBATransactor{contract: contract}, BOBAFilterer: BOBAFilterer{contract: contract}}, nil
}

// BOBA is an auto generated Go binding around an Ethereum contract.
type BOBA struct {
	BOBACaller     // Read-only binding to the contract
	BOBATransactor // Write-only binding to the contract
	BOBAFilterer   // Log filterer for contract events
}

// BOBACaller is an auto generated read-only Go binding around an Ethereum contract.
type BOBACaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOBATransactor is an auto generated write-only Go binding around an Ethereum contract.
type BOBATransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOBAFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BOBAFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BOBASession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BOBASession struct {
	Contract     *BOBA             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BOBACallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BOBACallerSession struct {
	Contract *BOBACaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BOBATransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BOBATransactorSession struct {
	Contract     *BOBATransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BOBARaw is an auto generated low-level Go binding around an Ethereum contract.
type BOBARaw struct {
	Contract *BOBA // Generic contract binding to access the raw methods on
}

// BOBACallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BOBACallerRaw struct {
	Contract *BOBACaller // Generic read-only contract binding to access the raw methods on
}

// BOBATransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BOBATransactorRaw struct {
	Contract *BOBATransactor // Generic write-only contract binding to access the raw methods on
}

// NewBOBA creates a new instance of BOBA, bound to a specific deployed contract.
func NewBOBA(address libcommon.Address, backend bind.ContractBackend) (*BOBA, error) {
	contract, err := bindBOBA(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BOBA{BOBACaller: BOBACaller{contract: contract}, BOBATransactor: BOBATransactor{contract: contract}, BOBAFilterer: BOBAFilterer{contract: contract}}, nil
}

// NewBOBACaller creates a new read-only instance of BOBA, bound to a specific deployed contract.
func NewBOBACaller(address libcommon.Address, caller bind.ContractCaller) (*BOBACaller, error) {
	contract, err := bindBOBA(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BOBACaller{contract: contract}, nil
}

// NewBOBATransactor creates a new write-only instance of BOBA, bound to a specific deployed contract.
func NewBOBATransactor(address libcommon.Address, transactor bind.ContractTransactor) (*BOBATransactor, error) {
	contract, err := bindBOBA(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BOBATransactor{contract: contract}, nil
}

// NewBOBAFilterer creates a new log filterer instance of BOBA, bound to a specific deployed contract.
func NewBOBAFilterer(address libcommon.Address, filterer bind.ContractFilterer) (*BOBAFilterer, error) {
	contract, err := bindBOBA(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BOBAFilterer{contract: contract}, nil
}

// bindBOBA binds a generic wrapper to an already deployed contract.
func bindBOBA(address libcommon.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BOBAABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOBA *BOBARaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOBA.Contract.BOBACaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOBA *BOBARaw) Transfer(opts *bind.TransactOpts) (types.Transaction, error) {
	return _BOBA.Contract.BOBATransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOBA *BOBARaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (types.Transaction, error) {
	return _BOBA.Contract.BOBATransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BOBA *BOBACallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BOBA.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BOBA *BOBATransactorRaw) Transfer(opts *bind.TransactOpts) (types.Transaction, error) {
	return _BOBA.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BOBA *BOBATransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (types.Transaction, error) {
	return _BOBA.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BOBA *BOBACaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BOBA *BOBASession) DOMAINSEPARATOR() ([32]byte, error) {
	return _BOBA.Contract.DOMAINSEPARATOR(&_BOBA.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_BOBA *BOBACallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _BOBA.Contract.DOMAINSEPARATOR(&_BOBA.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BOBA *BOBACaller) Allowance(opts *bind.CallOpts, owner libcommon.Address, spender libcommon.Address) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BOBA *BOBASession) Allowance(owner libcommon.Address, spender libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.Allowance(&_BOBA.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_BOBA *BOBACallerSession) Allowance(owner libcommon.Address, spender libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.Allowance(&_BOBA.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BOBA *BOBACaller) BalanceOf(opts *bind.CallOpts, account libcommon.Address) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BOBA *BOBASession) BalanceOf(account libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.BalanceOf(&_BOBA.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_BOBA *BOBACallerSession) BalanceOf(account libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.BalanceOf(&_BOBA.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BOBA *BOBACaller) Checkpoints(opts *bind.CallOpts, account libcommon.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesCheckpoint)).(*ERC20VotesCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BOBA *BOBASession) Checkpoints(account libcommon.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _BOBA.Contract.Checkpoints(&_BOBA.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_BOBA *BOBACallerSession) Checkpoints(account libcommon.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _BOBA.Contract.Checkpoints(&_BOBA.CallOpts, account, pos)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BOBA *BOBACaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BOBA *BOBASession) Decimals() (uint8, error) {
	return _BOBA.Contract.Decimals(&_BOBA.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_BOBA *BOBACallerSession) Decimals() (uint8, error) {
	return _BOBA.Contract.Decimals(&_BOBA.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BOBA *BOBACaller) Delegates(opts *bind.CallOpts, account libcommon.Address) (libcommon.Address, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(libcommon.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(libcommon.Address)).(*libcommon.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BOBA *BOBASession) Delegates(account libcommon.Address) (libcommon.Address, error) {
	return _BOBA.Contract.Delegates(&_BOBA.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BOBA *BOBACallerSession) Delegates(account libcommon.Address) (libcommon.Address, error) {
	return _BOBA.Contract.Delegates(&_BOBA.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_BOBA *BOBACaller) GetCurrentVotes(opts *bind.CallOpts, account libcommon.Address) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "getCurrentVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_BOBA *BOBASession) GetCurrentVotes(account libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.GetCurrentVotes(&_BOBA.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_BOBA *BOBACallerSession) GetCurrentVotes(account libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.GetCurrentVotes(&_BOBA.CallOpts, account)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_BOBA *BOBACaller) GetPastTotalSupply(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "getPastTotalSupply", blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_BOBA *BOBASession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _BOBA.Contract.GetPastTotalSupply(&_BOBA.CallOpts, blockNumber)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_BOBA *BOBACallerSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _BOBA.Contract.GetPastTotalSupply(&_BOBA.CallOpts, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_BOBA *BOBACaller) GetPastVotes(opts *bind.CallOpts, account libcommon.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "getPastVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_BOBA *BOBASession) GetPastVotes(account libcommon.Address, blockNumber *big.Int) (*big.Int, error) {
	return _BOBA.Contract.GetPastVotes(&_BOBA.CallOpts, account, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_BOBA *BOBACallerSession) GetPastVotes(account libcommon.Address, blockNumber *big.Int) (*big.Int, error) {
	return _BOBA.Contract.GetPastVotes(&_BOBA.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_BOBA *BOBACaller) GetPriorVotes(opts *bind.CallOpts, account libcommon.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "getPriorVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_BOBA *BOBASession) GetPriorVotes(account libcommon.Address, blockNumber *big.Int) (*big.Int, error) {
	return _BOBA.Contract.GetPriorVotes(&_BOBA.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_BOBA *BOBACallerSession) GetPriorVotes(account libcommon.Address, blockNumber *big.Int) (*big.Int, error) {
	return _BOBA.Contract.GetPriorVotes(&_BOBA.CallOpts, account, blockNumber)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BOBA *BOBACaller) GetVotes(opts *bind.CallOpts, account libcommon.Address) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BOBA *BOBASession) GetVotes(account libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.GetVotes(&_BOBA.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BOBA *BOBACallerSession) GetVotes(account libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.GetVotes(&_BOBA.CallOpts, account)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint224)
func (_BOBA *BOBACaller) MaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "maxSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint224)
func (_BOBA *BOBASession) MaxSupply() (*big.Int, error) {
	return _BOBA.Contract.MaxSupply(&_BOBA.CallOpts)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint224)
func (_BOBA *BOBACallerSession) MaxSupply() (*big.Int, error) {
	return _BOBA.Contract.MaxSupply(&_BOBA.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BOBA *BOBACaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BOBA *BOBASession) Name() (string, error) {
	return _BOBA.Contract.Name(&_BOBA.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BOBA *BOBACallerSession) Name() (string, error) {
	return _BOBA.Contract.Name(&_BOBA.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BOBA *BOBACaller) Nonces(opts *bind.CallOpts, owner libcommon.Address) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BOBA *BOBASession) Nonces(owner libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.Nonces(&_BOBA.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BOBA *BOBACallerSession) Nonces(owner libcommon.Address) (*big.Int, error) {
	return _BOBA.Contract.Nonces(&_BOBA.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BOBA *BOBACaller) NumCheckpoints(opts *bind.CallOpts, account libcommon.Address) (uint32, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BOBA *BOBASession) NumCheckpoints(account libcommon.Address) (uint32, error) {
	return _BOBA.Contract.NumCheckpoints(&_BOBA.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_BOBA *BOBACallerSession) NumCheckpoints(account libcommon.Address) (uint32, error) {
	return _BOBA.Contract.NumCheckpoints(&_BOBA.CallOpts, account)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BOBA *BOBACaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BOBA *BOBASession) Symbol() (string, error) {
	return _BOBA.Contract.Symbol(&_BOBA.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BOBA *BOBACallerSession) Symbol() (string, error) {
	return _BOBA.Contract.Symbol(&_BOBA.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BOBA *BOBACaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BOBA.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BOBA *BOBASession) TotalSupply() (*big.Int, error) {
	return _BOBA.Contract.TotalSupply(&_BOBA.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BOBA *BOBACallerSession) TotalSupply() (*big.Int, error) {
	return _BOBA.Contract.TotalSupply(&_BOBA.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BOBA *BOBATransactor) Approve(opts *bind.TransactOpts, spender libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BOBA *BOBASession) Approve(spender libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.Approve(&_BOBA.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_BOBA *BOBATransactorSession) Approve(spender libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.Approve(&_BOBA.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BOBA *BOBATransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BOBA *BOBASession) Burn(amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.Burn(&_BOBA.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_BOBA *BOBATransactorSession) Burn(amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.Burn(&_BOBA.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_BOBA *BOBATransactor) BurnFrom(opts *bind.TransactOpts, account libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_BOBA *BOBASession) BurnFrom(account libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.BurnFrom(&_BOBA.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_BOBA *BOBATransactorSession) BurnFrom(account libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.BurnFrom(&_BOBA.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BOBA *BOBATransactor) DecreaseAllowance(opts *bind.TransactOpts, spender libcommon.Address, subtractedValue *big.Int) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BOBA *BOBASession) DecreaseAllowance(spender libcommon.Address, subtractedValue *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.DecreaseAllowance(&_BOBA.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_BOBA *BOBATransactorSession) DecreaseAllowance(spender libcommon.Address, subtractedValue *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.DecreaseAllowance(&_BOBA.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BOBA *BOBATransactor) Delegate(opts *bind.TransactOpts, delegatee libcommon.Address) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BOBA *BOBASession) Delegate(delegatee libcommon.Address) (types.Transaction, error) {
	return _BOBA.Contract.Delegate(&_BOBA.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BOBA *BOBATransactorSession) Delegate(delegatee libcommon.Address) (types.Transaction, error) {
	return _BOBA.Contract.Delegate(&_BOBA.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BOBA *BOBATransactor) DelegateBySig(opts *bind.TransactOpts, delegatee libcommon.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BOBA *BOBASession) DelegateBySig(delegatee libcommon.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (types.Transaction, error) {
	return _BOBA.Contract.DelegateBySig(&_BOBA.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BOBA *BOBATransactorSession) DelegateBySig(delegatee libcommon.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (types.Transaction, error) {
	return _BOBA.Contract.DelegateBySig(&_BOBA.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BOBA *BOBATransactor) IncreaseAllowance(opts *bind.TransactOpts, spender libcommon.Address, addedValue *big.Int) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BOBA *BOBASession) IncreaseAllowance(spender libcommon.Address, addedValue *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.IncreaseAllowance(&_BOBA.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_BOBA *BOBATransactorSession) IncreaseAllowance(spender libcommon.Address, addedValue *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.IncreaseAllowance(&_BOBA.TransactOpts, spender, addedValue)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BOBA *BOBATransactor) Permit(opts *bind.TransactOpts, owner libcommon.Address, spender libcommon.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BOBA *BOBASession) Permit(owner libcommon.Address, spender libcommon.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (types.Transaction, error) {
	return _BOBA.Contract.Permit(&_BOBA.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_BOBA *BOBATransactorSession) Permit(owner libcommon.Address, spender libcommon.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (types.Transaction, error) {
	return _BOBA.Contract.Permit(&_BOBA.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BOBA *BOBATransactor) Transfer(opts *bind.TransactOpts, to libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BOBA *BOBASession) Transfer(to libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.Transfer(&_BOBA.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_BOBA *BOBATransactorSession) Transfer(to libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.Transfer(&_BOBA.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BOBA *BOBATransactor) TransferFrom(opts *bind.TransactOpts, from libcommon.Address, to libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BOBA *BOBASession) TransferFrom(from libcommon.Address, to libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.TransferFrom(&_BOBA.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_BOBA *BOBATransactorSession) TransferFrom(from libcommon.Address, to libcommon.Address, amount *big.Int) (types.Transaction, error) {
	return _BOBA.Contract.TransferFrom(&_BOBA.TransactOpts, from, to, amount)
}

// BOBAApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the BOBA contract.
type BOBAApprovalIterator struct {
	Event *BOBAApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BOBAApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BOBAApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BOBAApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BOBAApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BOBAApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BOBAApproval represents a Approval event raised by the BOBA contract.
type BOBAApproval struct {
	Owner   libcommon.Address
	Spender libcommon.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BOBA *BOBAFilterer) FilterApproval(opts *bind.FilterOpts, owner []libcommon.Address, spender []libcommon.Address) (*BOBAApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BOBA.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &BOBAApprovalIterator{contract: _BOBA.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BOBA *BOBAFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *BOBAApproval, owner []libcommon.Address, spender []libcommon.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _BOBA.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BOBAApproval)
				if err := _BOBA.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_BOBA *BOBAFilterer) ParseApproval(log types.Log) (*BOBAApproval, error) {
	event := new(BOBAApproval)
	if err := _BOBA.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BOBADelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the BOBA contract.
type BOBADelegateChangedIterator struct {
	Event *BOBADelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BOBADelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BOBADelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BOBADelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BOBADelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BOBADelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BOBADelegateChanged represents a DelegateChanged event raised by the BOBA contract.
type BOBADelegateChanged struct {
	Delegator    libcommon.Address
	FromDelegate libcommon.Address
	ToDelegate   libcommon.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BOBA *BOBAFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []libcommon.Address, fromDelegate []libcommon.Address, toDelegate []libcommon.Address) (*BOBADelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BOBA.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &BOBADelegateChangedIterator{contract: _BOBA.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BOBA *BOBAFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *BOBADelegateChanged, delegator []libcommon.Address, fromDelegate []libcommon.Address, toDelegate []libcommon.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BOBA.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BOBADelegateChanged)
				if err := _BOBA.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BOBA *BOBAFilterer) ParseDelegateChanged(log types.Log) (*BOBADelegateChanged, error) {
	event := new(BOBADelegateChanged)
	if err := _BOBA.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BOBADelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the BOBA contract.
type BOBADelegateVotesChangedIterator struct {
	Event *BOBADelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BOBADelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BOBADelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BOBADelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BOBADelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BOBADelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BOBADelegateVotesChanged represents a DelegateVotesChanged event raised by the BOBA contract.
type BOBADelegateVotesChanged struct {
	Delegate        libcommon.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BOBA *BOBAFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []libcommon.Address) (*BOBADelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BOBA.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &BOBADelegateVotesChangedIterator{contract: _BOBA.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BOBA *BOBAFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *BOBADelegateVotesChanged, delegate []libcommon.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BOBA.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BOBADelegateVotesChanged)
				if err := _BOBA.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_BOBA *BOBAFilterer) ParseDelegateVotesChanged(log types.Log) (*BOBADelegateVotesChanged, error) {
	event := new(BOBADelegateVotesChanged)
	if err := _BOBA.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BOBATransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the BOBA contract.
type BOBATransferIterator struct {
	Event *BOBATransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BOBATransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BOBATransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BOBATransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BOBATransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BOBATransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BOBATransfer represents a Transfer event raised by the BOBA contract.
type BOBATransfer struct {
	From  libcommon.Address
	To    libcommon.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BOBA *BOBAFilterer) FilterTransfer(opts *bind.FilterOpts, from []libcommon.Address, to []libcommon.Address) (*BOBATransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BOBA.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BOBATransferIterator{contract: _BOBA.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BOBA *BOBAFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *BOBATransfer, from []libcommon.Address, to []libcommon.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BOBA.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BOBATransfer)
				if err := _BOBA.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_BOBA *BOBAFilterer) ParseTransfer(log types.Log) (*BOBATransfer, error) {
	event := new(BOBATransfer)
	if err := _BOBA.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
